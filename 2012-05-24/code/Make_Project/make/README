1.变量说明：
  该部分对makefile中使用的主要的变量进行说明。
  全局变量部分：
   WORK_ROOT：编译项目的根目录
   HISI_ROOTBOX:文件系统根目录
   PLATFORM_LIBDIR:平台库存放路径，一般存放第三方程序库(如:CA库，浏览器等)及SDK平台库。
				库名以.lib结尾。
   DVD_MAKE:makefile模板路径
	
  临时变量部分：
   (a)平台无关部分：
   LIBDIR:项目链接库存放路径，其中一部分为entrie_lib下的所有库(更改后缀为.a)，另一部分
					则是项目源码编译生成。
   SDK_VERSION:当前的SDK版本，用于区别不同的平台。
   APPINC：指明应用程序编译通用的头文件。
   APP_LIB：指明应用程序通过源码编译后需要参加链接的库。
   CFG_INC：指明应用程序或者某个模块需要包含的头文件。
           注：在generic.mak中定义了通用的包含,如不需要通用的包含，每个单独的编译模块
		   可以重新定义该变量。
   CFG_OPT：指明应用程序或者某个模块编译需要的宏定义。
           注：在generic.mak中定了通用的宏定义，如不需要该定义，每个单独的编译模块可
		   以重新定义该变量。如果重新定义，请自己确保编译的正确性。
   COMPILE_MODULES：指定编译项目各模块的根目录。
   MODULE_INC:编译模块需要的头文件，仅供模块内部编译使用。//暂未实现
   MODULE_OPT:编译模块需要的宏定义，仅供模块内部编译使用。//暂未实现
      
	(b)平台相关部分：
   PLATFORM_INC：平台提供的API头文件路径
   PLATFORM_LIB：平台提供的库文件路径
   PLATFORM_OPT：平台编译建议的编译选项
   
2.文件说明：
compile_modules.mak
  用于编译多级子目录的编译模板，生成一个库。
default_ovtc.mak
  用于编译C/CPP文件的编译模板。
default_recursive.mak
  用于编译多级子目录的编译模板，生成单独的库。
generic.mak
  编译选项，平台选项，包含头文件等通用的编译模板，编译时Makefile必须要包含的。
kbuild.mak
  编译内核模块用的编译模板。
platform_xxxx.mak
  和平台相关的编译选项，binutils,SDK头文件和库的编译模板。
README
  该说明文件。
stbconfig.mak
  项目编译的配置模板。
  
使用说明：
一般情况下需要改动的文件为generic.mak和stbconfig.mak，其他的模板文件不需要修改。
default_ovtc.mak的使用主要有两种情况：
	(a)自定义编译文件及编译所需的头文件。注意：当前版本默认包含src下的源码。
	使用方式如下：
	include $(DVD_MAKE)/generic.mak
	CFG_INC =-I.\
			-I$(WORK_ROOT)/../ext/ext/include\
			-I$(WORK_ROOT)/../mid/middle/include\
			-I$(WORK_ROOT)/dbs/dbase/include
			-I其他头文件

	CFG_OPT =定义编译需要的宏
	
	SRC = 源文件列表
	include $(DVD_MAKE)/default_ovtc.mak

	(b)默认编译。此时默认编译code下的所有代码。
	使用方式如下：
	include $(DVD_MAKE)/default_ovtc.mak
compile_modules.mak和default_recursive.mak使用方法类似，主要有两种情况：
	(a)自定义编译模块名，增加头文件包含，增加模块编译宏定义。(不允许code下存在不编译的文件)
	使用方式如下：
	include $(DVD_MAKE)/generic.mak
	#重新定义COMPILE_DIR
	COMPILE_DIR = 需要编译的目录
	include $(DVD_MAKE)/default_recursive.mak

	(b)默认编译，此时编译当前目录下的所有文件夹。不进行递归处理。
	使用方式如下：
	include $(DVD_MAKE)/default_recursive.mak
